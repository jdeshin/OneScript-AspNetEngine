using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Xml;
using System.ComponentModel;
using System.IO;

namespace scheduledresearch
{
    class Program
    {
        static void Main(string[] args)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(ScheduledJobMetadata));
            //TextWriter writer = new StreamWriter("c:\\1\\1.xml");
            //ScheduledJobMetadata md = new ScheduledJobMetadata();
            //serializer.Serialize(writer, md);
            //ScheduledJobMetadata md = new ScheduledJobMetadata();
            //TextReader reader = new StreamReader("c:\\1\\1.xml");
            object mdo = ScheduledJobMetadata.Read("c:\\1\\1.xml");
            //reader.Close();
            JobSchedule js = new JobSchedule();
        }
    }

    public class JobSchedule
    {
        //Тип: Дата.
        //Время, после которого задание будет принудительно завершено.
        // Значение по умолчанию - 01.01.0001 00:00:00
        public DateTime CompletionTime
        {
            get;
            set;
        }

        //Тип: Дата.
        //Время конца расписания.Регламентные задания могут быть запущены только в том случае, если текущее время меньше или равно времени конца.Если время конца не задано, срок запуска неограничен.
        //В случае, когда ВремяНачала расписания больше ВремяКонца, выполняется переход через сутки, т.е.расписание будет выполняться только тогда, когда текущее время больше ВремяНачала, но меньше ВремяКонца следующего дня.
        //Пример:
        //ВремяНачала ВремяКонца Комментарий 8:00 – Работает с 8:00 до 24:00 – 8:00    Работает с 24:00 до 8:0013:00         14:00    Работает с 13:00 до 14:0014:00         13:00    Работает с 14:00 до 13:00 следующего дня, то есть работает всегда, кроме интервала с 13:00 до 14:00 
        public DateTime EndTime
        {
            get;
            set;
        }

        //Тип: Дата.
        //Дата конца расписания.Регламентные задания могут быть запущены только в том случае, если текущая дата меньше или равна дате конца.Если дата конца не задана, срок запуска неограничен.
        public DateTime BeginTime
        {
            get;
            set;
        }

        public DateTime EndDate
        {
            get;
            set;
        }

        public DateTime BeginDate
        {
            get;
            set;
        }

        public int DayInMonth
        {
            get;
            set;
        }

        public int WeekDayInMonth
        {
            get;
            set;
        }
        // Массив
        //?
        public System.Collections.Generic.List<int> DetailedDailySchedules
        {
            get;
            set;
        }

        // Массив
        public System.Collections.Generic.List<int> WeekDays
        {
            get;
            set;
        }

        //Тип: Число.
        //Интервал времени в секундах от начала запуска регламентного задания, после которого задание будет принудительно завершено.
        public int CompletionInterval
        {
            get;
            set;
        }
        //Тип: Массив.
        //Массив номеров месяцев, по которым задание может быть запущено(январь - 1, февраль - 2 и т.д.).
        public System.Collections.Generic.List<int> Months
        {
            get;
            set;
        }
        //Тип: Число.
        //Минимальный интервал времени(в секундах) между повторными запусками задания.Интервал считается от времени завершения предыдущего запуска до времени начала последующего.
        public int RepeatPause
        {
            get;
            set;
        }

        //Тип: Число.
        //Период времени в неделях, через который нужно повторять запуск регламентного задания.
        //1, задание может быть запущено каждую неделю;
        //2 - через неделю;
        //        и т.д.
        public int WeeksPeriod
        {
            get;
            set;
        }

        //Тип: Число.
        //Период времени в секундах, через который нужно запускать задание в течение дня.Если равен 0, задание в течение дня будет запущено однократно(задание может быть запущено только в те дни, которые определяются данным расписанием).
        public int RepeatPeriodInDay
        {
            get;
            set;
        }

        //Тип: Число.
        //Период времени в днях, через который нужно повторять запуск регламентного задания.
        //Если значение свойства равно 0, задание будет запущено в течение только одного дня (задание может быть запущено в течение одного дня несколько раз, в зависимости от ПериодПовтораВТечениеДня). Если ПериодПовтораДней = 1, задание будет запущено каждый день, ПериодПовтораДней = 2, задание будет запущено через день и т.д.
        public int DaysRepeatPeriod
        {
            get;
            set;
        }

        public JobSchedule()
        {
            WeekDays = new List<int>();
            Months = new List<int>();
        }
    }
   /* 
    public class ScheduledJob
    {

    
        //Тип: Строка.
        //Имя пользователя, под которым будет выполняться данное регламентное задание.Если имя пользователя не задано, регламентное задание будет выполняться пользователем по умолчанию, имеющим административные права.Чтения и запись для администратора.
    
        public string UserName
        {
            get;
            set;
        }

        public int RestartIntervalOnFailure
        {
            get;
            set;
        }

        public bool Use
        {
            get;
            set;
        }
        //Тип: Строка.
        //Прикладной идентификатор.Для регламентных заданий уникальность ключа не требуется.
        //Ключ используется при запуске фонового задания на основе регламентного задания.
        //В этом случае проверяется уникальность ключа для всех активных фоновых заданий, связанных с регламентными заданиями, имеющими одинаковый объект метаданных.
        //Другими словами, уникальность ключа проверяется в пределах объекта метаданного регламентного задания.
        //Если условие не выполняется задание не запускается.Возможность чтения и записи доступны только для администратора.
        public string Key
        {
            get;
            set;
        }
        //Тип: Число.
        //Количество повторов при аварийном завершении задания.
        public int RestartCountOnFailure
        {
            get;
            set;
        }

        //Тип: ОбъектМетаданных: РегламентноеЗадание.
        //Содержит метаданные регламентного задания.
        public IValue Metadata
        {
            get
            {
                return ValueFactory.Create();
            }
        }

        //Тип: Строка.
        //Наименование регламентного задания.
        public string Description
        {
            get;
            set;
        }

        //Тип: Массив.
        //Массив параметров регламентного задания.Количество и состав параметров должны соответствовать параметрам метода регламентного задания.
        public ArrayImpl Parameters
        {
            get;
            set;
        }

        //Тип: ФоновоеЗадание.
        //Последнее выполнившееся фоновое задание.
        public WebBackgroundJobImpl LastJob
        {
            get;
        }

        //Тип: Булево.
        //Указывает, является ли регламентное задание предопределенным.
        //Предопределенные регламентные задания определяются в метаданных.Предопределенные регламентные задания можно изменять, но нельзя удалять.Создание и удаление предопределенных регламентных заданий выполняется автоматически при сохранении основной конфигурации в конфигурацию базы данных. 
        //Истина - предопределенное задание.
        public bool Predefined
        {
            get;
        }

        //Тип: Структура.
        //Содержит значения разделителей.Имя элемента структуры содержит имя общего реквизита; значение – значение общего реквизита.
        //Элементами структуры являются значения всех разделителей регламентного задания с типом НезависимоИСовместно.
        public StructureImpl DataSeparation
        {
            get;
            set;
        }

        //Тип: РасписаниеРегламентногоЗадания.
        //Расписание задания.
        public Guid UUID
        {
            get;
            set;
        }
    }
    */
    public class ScheduledJobMetadata
    {
        //Уникальный идентификатор
        //
        public Guid uuid
        {
            get;
            set;
        }

        //Имя
        //Тип: Строка.
        //Имя объекта метаданных
        [XmlElement(IsNullable = false)]
        public string Name
        {
            get;
            set;
        }

        //Комментарий
        //Тип: Строка.
        //Произвольная строка символов.Как правило, расшифровывает и поясняет имя объекта метаданных.
        [DefaultValueAttribute("")]
        public string Comment
        {
            get;
            set;
        }

        //Синоним
        //Тип: Строка.
        //Строка произвольных символов - синоним имени объекта метаданных.
        [DefaultValueAttribute("")]
        public string Synonym
        {
            get;
            set;
        }

        //ИмяМетода
        //Тип: Строка.
        //Имя экспортируемой процедуры общего модуля, которая будет выполнена в результате запуска регламентного задания.
        [XmlElement(IsNullable = false)]
        public string MethodName
        {
            get;
            set;
        }

        //ИнтервалПовтораПриАварийномЗавершении
        //Тип: Число.
        //Интервал времени(в секундах), по истечении которого регламентное задание будет запущено повторно, если предыдущий его запуск завершился аварийно.
        public int RestartIntervalOnFailure
        {
            get;
            set;
        }

        //Использование
        //Тип: Булево.
        //Для регламентных заданий установка этого свойства в значение Истина указывает, что регламентное задание будет выполняться автоматически согласно расписанию.В противном случае регламентное задание автоматически выполнено не будет.
        public bool Use
        {
            get;
            set;
        }

        //Ключ
        //Тип: Строка. 
        //Ключ регламентного задания.Два регламентных задания с одинаковым значением ключа могут быть выполнены только последовательно.
        [DefaultValueAttribute("")]
        public string Key
        {
            get;
            set;
        }

        //КоличествоПовторовПриАварийномЗавершении
        //Тип: Число. 
        //Количество попыток выполнения регламентного задания после первого выполнения, завершившегося аварийно.
        public int RestartCountOnFailure
        {
            get;
            set;
        }

        //Наименование
        //Тип: Строка. 
        //Наименование регламентного задания.
        [DefaultValueAttribute("")]
        public string Description
        {
            get;
            set;
        }

        //Предопределенное
        //Тип: Булево. 
        //Если это свойство установлено в значение Истина, то в информационной базе автоматически будет создано предопределенное регламентное задание.
        public bool Predefined
        {
            get;
            set;
        }

        //Расписание
        //Тип: Неопределено.
        //Данное свойство всегда имеет значение Неопределено, т.к. во встроенном языке не предусмотрена работа со значением данного свойства.
        //Для получения расписания можно использовать свойство Расписание:
        //Задание = РегламентныеЗадания.НайтиПредопределенное(Объект_Метаданных);
        //РасписаниеЗадания = Задание.Расписание;
        /*
        public ScheduledJob Schedule
        {
            get
            {
                return null;
            }
        }
        */
        public ScheduledJobMetadata()
        {
        }

        static ScheduledJobMetadata()
        {
        }

        public static ScheduledJobMetadata Read(string fileName, XmlSerializer serializer = null)
        {
            if (serializer == null)
                serializer = new XmlSerializer(typeof(ScheduledJobMetadata));
            TextReader reader = new StreamReader(fileName);
            return (ScheduledJobMetadata)serializer.Deserialize(reader);
        }
    }

}
